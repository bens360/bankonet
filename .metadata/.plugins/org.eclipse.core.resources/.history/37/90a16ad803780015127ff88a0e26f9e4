package com.bankonet;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;



@Entity
@Table(name="client")
public class Client implements java.io.Serializable{
	
	@Enumerated(EnumType.STRING)
	private Civilite civilite;
	@ToString (uppercase = true) private String nom;
	@ToString private String prenom;
	@Id @ToString private String identifiant;
	@ToString private String login;
	@Column(name="mot_de_passe") @ToString private String motDePasse;
	//@Id @GeneratedValue private int id; 
	
	

	@Transient private Map<String, Compte> comptesMap = new HashMap<>();

	public Client() {
		
	}
	
	public Client(String identifiant, Civilite civilite, String nom, String prenom, String motDePasse, String login) {
		this.identifiant = identifiant;
		this.nom = nom;
		this.prenom = prenom;
		this.setCivilite(civilite);
		this.login = login;
		this.motDePasse = motDePasse;
	}
	
	
	
	@Override
	public String toString() {
		return "Client [civilite=" + civilite + ", nom=" + nom + ", prenom=" + prenom + ", identifiant=" + identifiant
				+ ", login=" + login + ", motDePasse=" + motDePasse + ", comptesMap=" + comptesMap + "]";
	}

	
	public void creerCompte(Compte compte) {
		comptesMap.put(compte.getNumero(), compte);
	}
	
	public void supprimerCompte(Compte compte) {
		comptesMap.remove(compte.getNumero());
	}
	
	public Compte retournerCompte(String numero) throws CompteNonTrouveException {
		Compte compteRecherche = (Compte) comptesMap.get(numero);
	
		if(compteRecherche == null) {
			throw new CompteNonTrouveException();
		}
		
		return compteRecherche;
	}
	
	public void supprimerCompte(String numero) throws CompteNonTrouveException {
		Compte compteRecherche = retournerCompte(numero);
		comptesMap.remove(compteRecherche.getNumero());
	}
	
	public String getLogin() {
		return login;
	}

	public void setLogin(String login) {
		this.login = login;
	}


	public String getMotDePasse() {
		return motDePasse;
	}

	public void setMotDePasse(String motDePasse) {
		this.motDePasse = motDePasse;
	}

	public Map<String, Compte> getComptesMap() {
		return comptesMap;
	}

	public void setComptesMap(Map<String, Compte> comptesMap) {
		this.comptesMap = comptesMap;
	}

	public String getNom() {
		return nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	public String getPrenom() {
		return prenom;
	}

	public void setPrenom(String prenom) {
		this.prenom = prenom;
	}

	public String getIdentifiant() {
		return identifiant;
	}

	public void setIdentifiant(String identifiant) {
		this.identifiant = identifiant;
	}
//
//	public int getId() {
//		return id;
//	}
//
//	public void setId(int id) {
//		this.id = id;
//	}
//	
	
	public Collection<Compte> getComptesList() {
		return comptesMap.values();
	}
	
	

	/*
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Client [");
		
		for(Field champ : Client.class.getDeclaredFields()) {
			ToString toStringAnn = champ.getAnnotation(ToString.class) ;
			if(toStringAnn != null) {
				sb.append(champ.getName());
				sb.append("=");
				try {
					if(toStringAnn.uppercase()) {
						sb.append(champ.get(this).toString().toUpperCase());
					} else {
						sb.append(champ.get(this));
					}
				} catch (IllegalArgumentException | IllegalAccessException e) {
					e.printStackTrace();
				}
				sb.append(",");
			}
		}
		sb.append("]");
		
		return sb.toString();
	}
	 */
	
	
	
	
	/**
	 * @return the civilite
	 */
	public Civilite getCivilite() {
		return civilite;
	}

	/*
	@Override
	public String toString() {
		return "Client [civilite=" + civilite + ", nom=" + nom + ", prenom=" + prenom + ", identifiant=" + identifiant
				+ ", login=" + login + ", motDePasse=" + motDePasse + ", id=" + id + ", comptesMap=" + comptesMap + "]";
	}

*/
	/**
	 * @param civilite the civilite to set
	 */
	public void setCivilite(Civilite civilite) {
		this.civilite = civilite;
	}
	
	public CompteCourant OuvreCompteCourant(int iteration) {
		String libelleCompte = "[" + this.getNom() + "]" + "_[" + this.getPrenom() + "]_COURANT_" + iteration;
		String numeroCC = "CC" + iteration;
		CompteCourant compteCourant = new CompteCourant(numeroCC, libelleCompte, 0, 0); 
		creerCompte(compteCourant);
		return compteCourant;
	}

}
